# !!! do not edit this file manually since it will be overwritte by a call of generate-yapps2-parser.sh in the root directory of the project. This is a parser generated by yapps2 and the h2g2mTex.g file in the parser directory

from pyramid.request import Request
from pyramid.threadlocal import get_current_registry
try:
    from .. import config
except:
    pass

import webhelpers.html.tags as t
Literal = t.literal

def br():
    return Literal(u'<br />')
def em(x):
    return Literal(u'<em>') + x + Literal(u'</em>')
def it(x):
    return Literal(u'<i>') + x + Literal(u'</i>')
def bf(x):
    return Literal(u'<b>') + x + Literal(u'</b>')

def img(x):
    return Literal(u'<img src="%s" style="max-width:600px;" />' % x)
    
def url(x):
    return href(x,x)
def ref(id):
    id = int(id)
    request = Request.blank('/')
    try:
        request.registry = get_current_registry()
        url = request.route_path('annotation.view', annotation_id=id)
    except:
        url = '/404'
    return Literal(u'<a href="%s">Annotation %i</a>' % (url, id))
 
def href(x, y):
    if not x.startswith('http://') and not x.startswith('https://'): x = 'http://'+x
    if y.startswith('http://'): y = y[7:]
    if y.startswith('https://'): y = y[8:]
    return Literal(u'<a href="' + x + '" target="blank">')+ y + Literal(u'</a>')
def ul(x):
    return Literal(u'<ul>') + x + Literal(u'</ul>')
def ol(x):
    return Literal(u'<ol>') + x + Literal(u'</ol>')
def dl(x):
    return Literal(u'<dl class="dl-horizontal">') + x + Literal(u'</dl>')
def li(x):
    return Literal(u'<li>') + x + Literal(u'</li>')
def dt(x):
    return Literal(u'<dt>') + x + Literal(u'</dt>')
def dd(x):
    return Literal(u'<dd>') + x + Literal(u'</dd>')

%%

parser h2g2mTeX:
    token EOF:                  r'$'
    token EMPTY:                r''
    token BS:                   r'\\'
    token NEWLINE:              r'\\\\'
    token PARAGRAPH:            r'(\r?\n\r?){2}'
    token BEGIN:                r'\\begin\b'
    token END:                  r'\\end\b'
    token ITEM:                 r'\\item\b'
    token EMPH:                 r'\\emph\b'
    token URL:                  r'\\url\b'
    token IMG:                  r'\\img\b'
    token HREF:                 r'\\href\b'
    token REF:                  r'\\ref\b'
    token ITALIC:               r'\\textit\b'
    token BOLD:                 r'\\textbf\b'
    token WHITESPACE:           r'\s'
    token NONWHITESPACE:        r'\S'
    token RESERVED:             r'[#%^&{}\\]'
    token NUMBER:               r'\d+'
    token CHAR:                 r'[^#%^&{}\\ ]'
    token CHAROPITEM:           r'[^#%^&{}\\\] ]'
    token OB:                   r'{'
    token CB:                   r'}'
    token WORD:                 r'\w+'
    token SPACE:                r'\\ '
    token PLAINBS:              r'\\textbackslash'

    rule group:                 OB text CB
                                {{ return text }}

    rule number_group:          OB number CB
                                {{ return number }}
    rule number:                NUMBER {{ return NUMBER }}
                                | number_group {{ return number_group }}
                                
    rule atom:                  CHAR {{ return CHAR }}
                                | group {{ return group }}

    rule href:                  {{ x = '' }}
                                {{ y = '' }}
                                HREF WHITESPACE* 
                                    atom {{ x += atom }}
                                    WHITESPACE* 
                                    atom {{ y += atom }}
                                {{ return href(x,y) }}

    rule url:                   URL WHITESPACE* atom
                                {{ return url(atom) }}

    rule img:                   IMG WHITESPACE* atom
                                {{ return img(atom) }}

    rule ref:                   REF WHITESPACE* number
                                {{ return ref(number) }}

    rule emph:                  EMPH WHITESPACE* atom
                                {{ return em(atom) }}

    rule textit:                ITALIC WHITESPACE* atom
                                {{ return it(atom) }}

    rule textbf:                BOLD WHITESPACE* atom
                                {{ return bf(atom) }}

    rule plainbs:               PLAINBS ( OB CB | r'\b' )
                                {{ return '\\' }}

    rule char:                  CHAR        {{ return CHAR }}
                                | plainbs   {{ return plainbs }}

    rule charopitem:            CHAROPITEM  {{ return CHAROPITEM }}
                                | plainbs   {{ return plainbs }}

    rule textspace:             {{ sp = '' }}
                                ( ( WHITESPACE | SPACE )+   {{ sp += ' ' }} )+
                                {{ return sp }}

    rule newline:               NEWLINE {{ return br() }}
    
    rule paragraph:             PARAGRAPH {{ return br()*2 }}

    rule chunk:                 {{ result = '' }}
                                ( char {{ result += char }}
                                )+
                                {{ return result }}

    rule chunkopitem:           {{ result = '' }}
                                ( charopitem {{ result += charopitem }}
                                )+
                                {{ return result }}

    rule format:                {{ result = '' }}
                                ( paragraph {{ result += paragraph }}
                                | textspace {{ result += textspace }}
                                | emph      {{ result += emph }}
                                | url       {{ result += url }}
                                | img       {{ result += img }}
                                | href      {{ result += href }}
                                | ref       {{ result += ref }}
                                | textit    {{ result += textit }}
                                | textbf    {{ result += textbf }}
                                | newline   {{ result += newline }}
                                )+
                                {{ return result }}

    rule text:                  {{ result = '' }}
                                ( chunk     {{ result += chunk }}
                                | format    {{ result += format }}
                                )+
                                {{ return result }}

    rule textopitem:            {{ result = '' }}
                                ( chunkopitem   {{ result += chunkopitem }}
                                | format        {{ result += format }}
                                )+
                                {{ return result }}

    rule environment:           {{ result = '' }}
                                BEGIN WHITESPACE* OB (
                                    {{ content = '' }}
                                    'itemize' CB WHITESPACE*
                                    ( item {{ content += item }} )*
                                    END   WHITESPACE* OB 'itemize'
                                    {{ result += ul(content) }}
                                    |
                                    {{ content = '' }}
                                    'enumerate' CB WHITESPACE*
                                    ( item {{ content += item }} )*
                                    END   WHITESPACE* OB 'enumerate'
                                    {{ result += ol(content) }}
                                    |
                                    {{ content = '' }}
                                    'description' CB WHITESPACE*
                                    ( opitem {{ content += opitem }} )*
                                    END   WHITESPACE* OB 'description'
                                    {{ result += dl(content) }}
                                ) CB
                                {{ return result }}

    rule item:                  ITEM inline_tex
                                {{ return li(inline_tex) }}

    rule opitem:                {{ content = '' }}
                                ITEM WHITESPACE* (
                                    ('\[' textopitem '\]' {{ content += dt(textopitem) }} ) | ''
                                ) inline_tex  
                                {{ content += dd(inline_tex) }}
                                {{ return content }}

    rule inline_tex:            {{ result = '' }}
                                ( environment {{ result += environment }}
                                | text        {{ result += text }}
                                )*
                                {{ return result }}

    rule tex:                   inline_tex EOF
                                {{ return inline_tex }}
